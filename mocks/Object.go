// Code generated by MockGen. DO NOT EDIT.
// Source: object.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Object is a mock of Object interface
type Object struct {
	ctrl     *gomock.Controller
	recorder *ObjectMockRecorder
}

// ObjectMockRecorder is the mock recorder for Object
type ObjectMockRecorder struct {
	mock *Object
}

// NewObject creates a new mock instance
func NewObject(ctrl *gomock.Controller) *Object {
	mock := &Object{ctrl: ctrl}
	mock.recorder = &ObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Object) EXPECT() *ObjectMockRecorder {
	return m.recorder
}

// Destroy mocks base method
func (m *Object) Destroy() (bool, error) {
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy
func (mr *ObjectMockRecorder) Destroy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Object)(nil).Destroy))
}

// IsActive mocks base method
func (m *Object) IsActive() bool {
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive
func (mr *ObjectMockRecorder) IsActive() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*Object)(nil).IsActive))
}
